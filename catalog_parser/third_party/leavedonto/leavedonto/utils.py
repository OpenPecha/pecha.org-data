from math import ceil

from openpyxl.utils import coordinate_to_tuple, get_column_letter


def calculate_bostr_len(string):
    sizes = {
        "ༀ": 1,
        "༁": 1,
        "༂": 1,
        "༃": 1,
        "༄": 1.5,
        "༅": 1,
        "༆": 1.5,
        "༇": 1.7,
        "༈": 1,
        "༉": 1,
        "༊": 1.2,
        "་": 0.2,
        "༌": 0.2,
        "།": 0.2,
        "༎": 0.4,
        "༏": 0.2,
        "༐": 0.2,
        "༑": 0.2,
        "༒": 1.5,
        "༓": 1,
        "༔": 0.4,
        "༕": 1,
        "༖": 1,
        "༗": 1,
        "༘": 0.4,
        "༙": 0,
        "༚": 0.2,
        "༛": 0.4,
        "༜": 0.4,
        "༝": 0.2,
        "༞": 0.4,
        "༟": 0.4,
        "༠": 0.4,
        "༡": 0.4,
        "༢": 0.4,
        "༣": 0.4,
        "༤": 0.6,
        "༥": 0.4,
        "༦": 0.4,
        "༧": 0.4,
        "༨": 0.4,
        "༩": 0.4,
        "༪": 0.4,
        "༫": 0.4,
        "༬": 0.4,
        "༭": 0.4,
        "༮": 0.4,
        "༯": 0.4,
        "༰": 0.4,
        "༱": 0.4,
        "༲": 0.4,
        "༳": 0.4,
        "༴": 0.2,
        "༵": 0,
        "༶": 0.4,
        "༷": 0,
        "༸": 0.2,
        "༹": 0,
        "༺": 1.7,
        "༻": 1.7,
        "༼": 1,
        "༽": 1,
        "༾": 0.7,
        "༿": 0,
        "ཀ": 1,
        "ཁ": 1,
        "ག": 1,
        "གྷ": 1,
        "ང": 1,
        "ཅ": 1,
        "ཆ": 1,
        "ཇ": 1,
        "཈": 1,
        "ཉ": 1,
        "ཊ": 1,
        "ཋ": 1,
        "ཌ": 1,
        "ཌྷ": 1,
        "ཎ": 1,
        "ཏ": 1,
        "ཐ": 1,
        "ད": 1,
        "དྷ": 1,
        "ན": 1,
        "པ": 1,
        "ཕ": 1,
        "བ": 1,
        "བྷ": 1,
        "མ": 1,
        "ཙ": 1,
        "ཚ": 1,
        "ཛ": 1,
        "ཛྷ": 1,
        "ཝ": 1,
        "ཞ": 1,
        "ཟ": 1,
        "འ": 1,
        "ཡ": 1,
        "ར": 1,
        "ལ": 1,
        "ཤ": 1,
        "ཥ": 1,
        "ས": 1,
        "ཧ": 1,
        "ཨ": 1,
        "ཀྵ": 1,
        "ཪ": 1,
        "ཫ": 1,
        "ཬ": 1,
        "ཱ": 0,
        "ི": 0,
        "ཱི": 0,
        "ུ": 0,
        "ཱུ": 0,
        "ྲྀ": 0,
        "ཷ": 0,
        "ླྀ": 0,
        "ཹ": 0,
        "ེ": 0,
        "ཻ": 0,
        "ོ": 0,
        "ཽ": 0,
        "ཾ": 0,
        "ཿ": 0,
        "ྀ": 0,
        "ཱྀ": 0,
        "ྂ": 0,
        "ྃ": 0,
        "྄": 0,
        "྅": 1,
        "྆": 0,
        "྇": 0,
        "ྈ": 1,
        "ྉ": 1,
        "ྊ": 1,
        "ྋ": 1,
        "ྌ": 1,
        "ྍ": 0,
        "ྎ": 0,
        "ྏ": 0,
        "ྐ": 0,
        "ྑ": 0,
        "ྒ": 0,
        "ྒྷ": 0,
        "ྔ": 0,
        "ྕ": 0,
        "ྖ": 0,
        "ྗ": 0,
        "ྙ": 0,
        "ྚ": 0,
        "ྛ": 0,
        "ྜ": 0,
        "ྜྷ": 0,
        "ྞ": 0,
        "ྟ": 0,
        "ྠ": 0,
        "ྡ": 0,
        "ྡྷ": 0,
        "ྣ": 0,
        "ྤ": 0,
        "ྥ": 0,
        "ྦ": 0,
        "ྦྷ": 0,
        "ྨ": 0,
        "ྩ": 0,
        "ྪ": 0,
        "ྫ": 0,
        "ྫྷ": 0,
        "ྭ": 0,
        "ྮ": 0,
        "ྯ": 0,
        "ྰ": 0,
        "ྱ": 0,
        "ྲ": 0,
        "ླ": 0,
        "ྴ": 0,
        "ྵ": 0,
        "ྶ": 0,
        "ྷ": 0,
        "ྸ": 0,
        "ྐྵ": 0,
        "ྺ": 0,
        "ྻ": 0,
        "ྼ": 0,
        "྾": 1,
        "྿": 1,
        "࿀": 0.4,
        "࿁": 0.2,
        "࿂": 1,
        "࿃": 1,
        "࿄": 1,
        "࿅": 0.6,
        "࿆": 0,
        "࿇": 1,
        "࿈": 1,
        "࿉": 1.2,
        "࿊": 1.2,
        "࿋": 1.2,
        "࿌": 1.2,
        "࿎": 0.4,
        "࿏": 0.4,
        "࿐": 1.7,
        "࿑": 1,
        "࿒": 0.2,
        "࿓": 1.5,
        "࿔": 1,
        "࿕": 1.2,
        "࿖": 1.2,
        "࿗": 1.2,
        "࿘": 1.2,
        "࿙": 1.2,
        "࿚": 1.2,
    }
    size = 0
    for s in string:
        if s in sizes:
            size += sizes[s]
        else:
            size += 1
    return ceil(size)


def resize_sheet(sheet, mode="both"):
    # mode can be 'both' or 'width' or 'height'
    height = 30
    min_width = 5
    width_adjustent = 5

    max_row, max_col = coordinate_to_tuple(sheet.dimensions.split(":")[1])

    # adjusting row heights
    if mode == "both" or mode == "height":
        for i in range(1, max_row + 1):
            sheet.row_dimensions[i].height = height

    # adjusting col width
    if mode == "both" or mode == "width":
        cols = list(sheet.iter_cols())
        for i in range(max_col):
            col = cols[i]
            length = max([calculate_bostr_len(str(c.value)) for c in col])
            length += width_adjustent
            col_letter = get_column_letter(i + 1)
            width = min_width if length <= min_width else length
            sheet.column_dimensions[col_letter].width = width
